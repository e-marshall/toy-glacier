{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to toy-glacier-project","text":"<p>This is a very small toy CLI tool.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>accumulation-event</code>  - Create a glacier and trigger an accumulation event with a specified amount. </li> <li><code>ablation-event</code>  - Create a glacier and trigger an ablation event with a specified amount. </li> </ul>"},{"location":"#example","title":"Example","text":"<p>Call either command and pass an <code>amount</code> argument:</p> <p><pre><code>toy-glacier-project accumulation-event 45\n</code></pre> Returns: <pre><code>Glacier created with name: defaultName, initial mass: 100 kg.\nAccumulation event: Total mass is now 145 kg.\n</code></pre></p> <p>By default, each command creates a glacier with a mass of 100 kg and the name 'defaultName'. To modify either of these default arguments, pass them as optional args:</p> <p><pre><code>toy-glacier-project ablation-event 15 --glacier-mass 50 -- name MyFirstGlacier\n</code></pre> Returns: <pre><code>Glacier created with name: MyFirstGlacier, initial mass: 50 kg.\nAblation event: Mass is now 35 kg.\n</code></pre></p>"},{"location":"cli-reference/","title":"Command line interface","text":""},{"location":"cli-reference/#accumulation-event","title":"accumulation-event","text":"<p>Create a glacier and apply an accumulation event.</p> <p>This command creates a glacier with the specified name and initial mass, then increases its mass by the specified accumulation amount.</p>"},{"location":"cli-reference/#parameters","title":"Parameters","text":"<p>amount : int     The mass to add to the glacier. name : str     The name assigned to the glacier. glacier_mass : int     The initial mass of the glacier.</p> <p>Usage:</p> <pre><code>\u001b[1maccumulation-event\u001b[0m [\u001b[1;36mOPTIONS\u001b[0m] \u001b[1;36mAMOUNT\u001b[0m\n</code></pre>"},{"location":"cli-reference/#ablation-event","title":"ablation-event","text":"<p>Create a glacier and apply an ablation event.</p> <p>This command creates a glacier with the specified name and initial mass, then decreases its mass by the specified ablation amount.</p>"},{"location":"cli-reference/#parameters_1","title":"Parameters","text":"<p>amount : int     The mass to remove from the glacier. name : str     The name assigned to the glacier. glacier_mass : int     The initial mass of the glacier.</p> <p>Usage:</p> <pre><code>\u001b[1mablation-event\u001b[0m [\u001b[1;36mOPTIONS\u001b[0m] \u001b[1;36mAMOUNT\u001b[0m\n</code></pre>"},{"location":"core-reference/","title":"Core module","text":"<p>Classes:</p> Name Description <code>Glacier</code> <p>A class representing a glacier with a name and mass.</p> <p>Functions:</p> Name Description <code>make_glacier</code> <p>Create a Glacier object.</p>"},{"location":"core-reference/#toy_glacier_project.core.Glacier","title":"toy_glacier_project.core.Glacier","text":"<p>A class representing a glacier with a name and mass.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the glacier.</p> required <code>mass</code> <code>int</code> <p>The initial mass of the glacier.</p> required <p>Methods:</p> Name Description <code>ablate</code> <p>Simulate ablation by decreasing the glacier's mass.</p> <code>accumulate</code> <p>Simulate accumulation by increasing the glacier's mass.</p> <code>can_ablate</code> <p>Check if the glacier can lose the specified mass without going negative or to zero.</p> Source code in <code>src/toy_glacier_project/core.py</code> <pre><code>class Glacier:\n    \"\"\"\n    A class representing a glacier with a name and mass.\n\n    Parameters\n    ----------\n    name : str\n        The name of the glacier.\n    mass : int\n        The initial mass of the glacier.\n    \"\"\"\n\n    def __init__(self, name: str, mass: int):\n        self.name = name\n        self.mass = mass\n\n    def can_ablate(self, ablate_amount: int) -&gt; bool:\n        \"\"\"\n        Check if the glacier can lose the specified mass without going negative or to zero.\n\n        Parameters\n        ----------\n        ablate_amount : int\n            The amount of mass to potentially ablate.\n\n        Returns\n        -------\n        bool\n            True if the glacier can lose the specified mass, False otherwise.\n        \"\"\"\n        return self.mass &gt;= ablate_amount  # .qty\n\n    def accumulate(self, accum_amount: int):\n        \"\"\"\n        Simulate accumulation by increasing the glacier's mass.\n\n        Parameters\n        ----------\n        accum_amount : int\n            The mass to add to the glacier.\n        \"\"\"\n        self.mass += accum_amount\n\n    def ablate(self, ablate_amount: int):\n        \"\"\"\n        Simulate ablation by decreasing the glacier's mass.\n\n        Parameters\n        ----------\n        ablate_amount : int\n            The amount of mass to remove from the glacier.\n\n        Raises\n        ------\n        ValueError\n            If the glacier does not have enough mass to ablate the specified amount.\n        \"\"\"\n        if self.can_ablate(ablate_amount):\n            self.mass -= ablate_amount  # .qtz\n        else:\n            raise ValueError(\"Glacier has disappeared, no more mass to lose.\")\n</code></pre>"},{"location":"core-reference/#toy_glacier_project.core.Glacier.ablate","title":"toy_glacier_project.core.Glacier.ablate","text":"<pre><code>ablate(ablate_amount)\n</code></pre> <p>Simulate ablation by decreasing the glacier's mass.</p> <p>Parameters:</p> Name Type Description Default <code>ablate_amount</code> <code>int</code> <p>The amount of mass to remove from the glacier.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the glacier does not have enough mass to ablate the specified amount.</p> Source code in <code>src/toy_glacier_project/core.py</code> <pre><code>def ablate(self, ablate_amount: int):\n    \"\"\"\n    Simulate ablation by decreasing the glacier's mass.\n\n    Parameters\n    ----------\n    ablate_amount : int\n        The amount of mass to remove from the glacier.\n\n    Raises\n    ------\n    ValueError\n        If the glacier does not have enough mass to ablate the specified amount.\n    \"\"\"\n    if self.can_ablate(ablate_amount):\n        self.mass -= ablate_amount  # .qtz\n    else:\n        raise ValueError(\"Glacier has disappeared, no more mass to lose.\")\n</code></pre>"},{"location":"core-reference/#toy_glacier_project.core.Glacier.accumulate","title":"toy_glacier_project.core.Glacier.accumulate","text":"<pre><code>accumulate(accum_amount)\n</code></pre> <p>Simulate accumulation by increasing the glacier's mass.</p> <p>Parameters:</p> Name Type Description Default <code>accum_amount</code> <code>int</code> <p>The mass to add to the glacier.</p> required Source code in <code>src/toy_glacier_project/core.py</code> <pre><code>def accumulate(self, accum_amount: int):\n    \"\"\"\n    Simulate accumulation by increasing the glacier's mass.\n\n    Parameters\n    ----------\n    accum_amount : int\n        The mass to add to the glacier.\n    \"\"\"\n    self.mass += accum_amount\n</code></pre>"},{"location":"core-reference/#toy_glacier_project.core.Glacier.can_ablate","title":"toy_glacier_project.core.Glacier.can_ablate","text":"<pre><code>can_ablate(ablate_amount)\n</code></pre> <p>Check if the glacier can lose the specified mass without going negative or to zero.</p> <p>Parameters:</p> Name Type Description Default <code>ablate_amount</code> <code>int</code> <p>The amount of mass to potentially ablate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the glacier can lose the specified mass, False otherwise.</p> Source code in <code>src/toy_glacier_project/core.py</code> <pre><code>def can_ablate(self, ablate_amount: int) -&gt; bool:\n    \"\"\"\n    Check if the glacier can lose the specified mass without going negative or to zero.\n\n    Parameters\n    ----------\n    ablate_amount : int\n        The amount of mass to potentially ablate.\n\n    Returns\n    -------\n    bool\n        True if the glacier can lose the specified mass, False otherwise.\n    \"\"\"\n    return self.mass &gt;= ablate_amount  # .qty\n</code></pre>"},{"location":"core-reference/#toy_glacier_project.core.make_glacier","title":"toy_glacier_project.core.make_glacier","text":"<pre><code>make_glacier(name, mass)\n</code></pre> <p>Create a Glacier object.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the glacier.</p> required <code>mass</code> <code>int</code> <p>The initial mass of the glacier.</p> required <p>Returns:</p> Type Description <code>Glacier</code> <p>A new Glacier object with the specified name and mass.</p> Source code in <code>src/toy_glacier_project/core.py</code> <pre><code>def make_glacier(name: str, mass: int):\n    \"\"\"\n    Create a Glacier object.\n\n    Parameters\n    ----------\n    name : str\n        The name of the glacier.\n    mass : int\n        The initial mass of the glacier.\n\n    Returns\n    -------\n    Glacier\n        A new Glacier object with the specified name and mass.\n    \"\"\"\n    glacier = Glacier(name=name, mass=mass)\n    return glacier\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>This project is listed in the Python Package Index (PyPI). It can be installed with pip:</p> <p><code>pip install toy-glacier-project</code></p>"}]}